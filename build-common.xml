<project name="build-common" xmlns:ivy="antlib:org.apache.ivy.ant" default="dist">
    <dirname property="build.common" file="${ant.file.build-common}"/>

    <condition property="use.svn" value="Yes, do it!">
        <available file="${basedir}/.svn/entries"/>
    </condition>
    <condition property="use.war" value="Yes, do it!">
        <equals arg1="war" arg2="${artifact-type}"/>
    </condition>
    <condition property="use.jar" value="Yes, do it!">
        <or>
            <not>
                <isset property="artifact-type"/>
            </not>
            <equals arg1="jar" arg2="${artifact-type}"/>
        </or>
    </condition>
    <condition property="CATALINA_HOME">
        <and>
            <isset property="use.war"/>
            <isset property="env.CATALINA_HOME"/>
        </and>
    </condition>
    <property name="deploy.webapps" value="${env.CATALINA_HOME}/webapps"/>

    <property name="src" location="${basedir}/src"/>
    <property name="src.properties" location="${basedir}/properties"/>
    <property name="test" location="${basedir}/test"/>
    <property name="integration" location="${basedir}/integration"/>
    <property name="build" location="${basedir}/build"/>
    <property name="build.dist" location="${build}/dist"/>
    <property name="build.classes" location="${build}/classes"/>
    <property name="build.test" location="${build}/test"/>
    <property name="build.integration" location="${build}/integration"/>
    <property name="build.javadoc" location="${build}/javadoc"/>
    <property name="test.classes" location="${build.test}/classes"/>
    <property name="test.properties" location="${basedir}/test-properties"/>
    <property name="test.results" location="${build.test}/results"/>
    <property name="integration.tests" location="${basedir}/integration-tests"/>
    <property name="integration.classes" location="${build.integration}/classes"/>
    <property name="integration.properties" location="${basedir}/integration-properties"/>
    <property name="coverage" location="${build}/coverage"/>
    <property name="coverage.classes" location="${coverage}/classes"/>
    <property name="reports" location="${build}/reports"/>
    <property name="reports.test" location="${reports}/test"/>
    <property name="reports.coverage" location="${reports}/coverage"/>
    <property name="reports.ivy" location="${reports}/ivy"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="lib.compile" location="${lib}/compile"/>
    <property name="lib.runtime" location="${lib}/runtime"/>
    <property name="lib.test" location="${lib}/test"/>
    <property name="lib.build" location="${lib}/build"/>

    <property name="ivy.version" value="2.0.0"/>
    <property name="ivy.lib" location="${build.common}/lib/ivy"/>
    <property name="ivy.jar.file" location="${ivy.lib}/ivy-${ivy.version}.jar"/>
    <condition property="download-ivy.once">
        <available file="${ivy.jar.file}"/>
    </condition>

    <path id="lib.compile.path">
        <fileset dir="${lib.compile}" includes="*.jar"/>
    </path>

    <path id="lib.runtime.path">
        <fileset dir="${lib.runtime}" includes="*.jar"/>
    </path>

    <path id="lib.test.path">
        <fileset dir="${lib.test}" includes="*.jar"/>
    </path>

    <path id="lib.build.path">
        <fileset dir="${lib.build}" includes="*.jar"/>
    </path>

    <target name="clean-artifacts">
        <delete dir="${build}"/>
    </target>

    <target name="clean" depends="clean-artifacts" description="Remove all generated files and directory">
        <delete dir="${lib}"/>
    </target>

    <target name="download-ivy" unless="download-ivy.once">
        <mkdir dir="${ivy.lib}"/>
        <get
                src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
                dest="${ivy.jar.file}" usetimestamp="true" verbose="true"/>

        <get src="http://ftp.us.xemacs.org/pub/mirrors/maven2/com/jcraft/jsch/0.1.38/jsch-0.1.38.jar"
             dest="${ivy.lib}/jsch-0.1.38.jar" usetimestamp="true" verbose="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy" unless="init-ivy.once">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.lib}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:settings file="${build.common}/ivy-settings.xml"/>
        <property name="init-ivy.once" value="yes"/>
    </target>

    <target name="resolve" depends="init-ivy" description="Resolve dependencies">
        <ivy:resolve/>
        <echo message="Resolved: ${ivy.resolved.configurations}"/>
        <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]"/>
    </target>

    <target name="init" depends="resolve">
        <tstamp>
            <format property="time.init" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <mkdir dir="${lib.runtime}"/>
        <mkdir dir="${lib.compile}"/>
        <mkdir dir="${lib.test}"/>
        <mkdir dir="${lib.build}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.javadoc}"/>
        <mkdir dir="${build.dist}"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${test.results}"/>
        <mkdir dir="${reports.test}"/>
        <mkdir dir="${reports.ivy}"/>
        <mkdir dir="${reports.coverage}"/>
        <mkdir dir="${coverage.classes}"/>
        <mkdir dir="${integration.classes}"/>
    </target>

    <target name="compile" depends="init">
        <javac destdir="${build.classes}" srcdir="${src}" includes="**" debug="true" target="1.5">
            <classpath refid="lib.compile.path"/>
            <classpath refid="lib.runtime.path"/>
        </javac>
    </target>

    <target name="instrument" depends="compile" if="use.cobertura">
        <taskdef classpathref="lib.build.path" resource="tasks.properties"/>
        <cobertura-instrument todir="${coverage.classes}" datafile="${coverage}/cobertura.ser">
            <fileset dir="${build.classes}" includes="**/*.class"/>
        </cobertura-instrument>
        <property name="instrumented" value="sure"/>
    </target>

    <target name="test-compile" depends="compile" if="use.test">
        <javac destdir="${test.classes}" srcdir="${test}" includes="**" debug="true" target="1.5">
            <classpath location="${build.classes}"/>
            <classpath refid="lib.compile.path"/>
            <classpath refid="lib.runtime.path"/>
            <classpath refid="lib.test.path"/>
        </javac>
    </target>

    <target name="test" depends="instrument,test-compile" if="use.test" description="Run unit tests">
        <junit fork="true" dir="${basedir}" failureproperty="test.failed" printsummary="yes">
            <jvmarg value="-Dnet.sourceforge.cobertura.datafile=${coverage}/cobertura.ser"/>
            <classpath location="${coverage.classes}"/>
            <classpath location="${build.classes}"/>
            <classpath location="${test.classes}"/>
            <classpath location="${test.properties}"/>
            <classpath location="${src.properties}"/>
            <classpath refid="lib.compile.path"/>
            <classpath refid="lib.runtime.path"/>
            <classpath refid="lib.test.path"/>
            <classpath refid="lib.build.path"/>
            <formatter type="xml"/>
            <batchtest todir="${test.results}">
                <fileset dir="${test}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
        <property name="tested" value="sure"/>
    </target>

    <target name="integration-test-compile" depends="compile" if="use.integration">
        <javac destdir="${integration.classes}" srcdir="${integration}" includes="**" debug="true" target="1.5">
            <classpath location="${build.classes}"/>
            <classpath refid="lib.compile.path"/>
            <classpath refid="lib.runtime.path"/>
            <classpath refid="lib.test.path"/>
        </javac>
    </target>

    <target name="integration-test" depends="instrument,integration-test-compile" if="use.integration">
        <java jar="${lib.build}/fitnesse-20100103.jar" dir="${integration.tests}" fork="true" resultproperty="integration.result">
            <arg value="-p"/>
            <arg value="9123"/>
            <arg value="-r"/>
            <arg value="fitnesse"/>
            <arg value="-c"/>
            <arg value="${integration.suite}?suite&amp;format=text"/>
        </java>
        <condition property="test.failed">
            <not>
                <equals arg1="0" arg2="${integration.result}"/>
            </not>
        </condition>
    </target>

    <target name="fitnesse" depends="resolve">
        <java jar="${lib.build}/fitnesse-20100103.jar" dir="${integration.tests}" failonerror="true" fork="true">
            <arg value="-p"/>
            <arg value="9234"/>
            <arg value="-r"/>
            <arg value="fitnesse"/>
            <arg value="-o"/>
            <arg value="-e"/>
            <arg value="0"/>
        </java>
    </target>

    <target name="jar" depends="compile" if="use.jar">
        <jar destfile="${build.dist}/${ant.project.name}.jar">
            <fileset dir="${build.classes}">
                <include name="**"/>
                <exclude name="**/client/**"/>
            </fileset>
            <fileset dir="${src.properties}">
                <include name="**"/>
            </fileset>
            <fileset dir="${build.dist}">
                <include name="updates.zip"/>
            </fileset>
        </jar>
    </target>

    <target name="client-jar" if="use.client-jar">
        <jar destfile="${build.dist}/${ant.project.name}-client.jar">
            <fileset dir="${build.classes}">
                <include name="**/client/**"/>
            </fileset>
        </jar>
    </target>

    <target name="source-jar">
        <jar destfile="${build.dist}/${ant.project.name}-source.jar">
            <fileset dir="${src}">
                <include name="**"/>
            </fileset>
            <fileset dir="${basedir}">
                <include name="LICENSE"/>
            </fileset>
        </jar>
    </target>

    <target name="javadoc" if="use.javadoc">
        <javadoc destdir="${build.javadoc}">
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
            <classpath refid="lib.runtime.path"/>
        </javadoc>
    </target>

    <target name="doc-jar" depends="javadoc" if="use.javadoc">
        <jar destfile="${build.dist}/${ant.project.name}-doc.jar">
            <fileset dir="${build.javadoc}">
                <include name="**"/>
            </fileset>
        </jar>
    </target>

    <target name="update-zip" if="use.exodus">
        <zip zipfile="${build.dist}/updates.zip">
            <fileset dir="${basedir}/exodus/mysql">
                <include name="*.sql"/>
            </fileset>
        </zip>
    </target>

    <target name="build-properties" depends="resolve,svnpath,svnrev">
        <condition property="build.number" value="${env.BUILD_NUMBER}">
            <isset property="${env.BUILD_NUMBER}"/>
        </condition>
        <property name="build.number" value="SNAPSHOT"/>
        <property name="dist.path" value="${ivy.organization}/${ivy.module}"/>
        <property name="dist.revision" value="${ivy.revision}"/>
        <propertyfile file="${build.classes}/build.properties">
            <entry key="build.path" value="${dist.path}"/>
            <entry key="build.rev" value="${dist.revision}"/>
            <entry key="build.user" value="${user.name}"/>
            <entry key="build.date" value="${time.init}"/>
            <entry key="build.number" value="${build.number}"/>
        </propertyfile>
    </target>

    <target name="war" depends="compile,update-zip,build-properties" if="use.war">
        <war warfile="${build.dist}/${ant.project.name}.war" basedir="${basedir}/web"
             webxml="${basedir}/web/WEB-INF/web.xml">
            <classes dir="${build.classes}" includes="**"/>
            <classes dir="${src.properties}" includes="**"/>
            <classes file="${build.dist}/updates.zip"/>
            <lib dir="${lib.runtime}" includes="*.jar"/>
            <fileset dir="${basedir}/web" includes="**/*.*"/>
        </war>
    </target>

    <target name="src-zip" depends="resolve">
        <zip destfile="${build.dist}/${ant.project.name}-src.zip" >
            <zipfileset prefix="${ant.project.name}-${ivy.revision}" dir="${basedir}">
                <include name="src/**"/>
                <include name="properties/**"/>
                <include name="test/**"/>
                <include name="test-properties/**"/>
                <include name="integration/**"/>
                <include name="integration-properties/**"/>
                <include name="web/**"/>
                <include name="LICENSE"/>
                <include name="build.xml"/>
                <include name="ivy.xml"/>
            </zipfileset>
            <zipfileset prefix="build-common" dir="${basedir}/../build-common">
                <include name="build-common.xml"/>
                <include name="build-ivy.xml"/>
                <include name="ivy-settings.xml"/>  
            </zipfileset>
        </zip>
    </target>

    <target name="src-targz" depends="resolve">
        <tar destfile="${build.dist}/${ant.project.name}-src.tar.gz" compression="gzip">
            <tarfileset prefix="${ant.project.name}-${ivy.revision}" dir="${basedir}">
                <include name="src/**"/>
                <include name="properties/**"/>
                <include name="test/**"/>
                <include name="test-properties/**"/>
                <include name="integration/**"/>
                <include name="integration-properties/**"/>
                <include name="web/**"/>
                <include name="LICENSE"/>
                <include name="build.xml"/>
                <include name="ivy.xml"/>
            </tarfileset>
            <zipfileset prefix="build-common" dir="${basedir}/../build-common">
                <include name="build-common.xml"/>
                <include name="build-ivy.xml"/>
                <include name="ivy-settings.xml"/>
            </zipfileset>
        </tar>
    </target>

    <target name="artifacts" depends="war,jar,client-jar,source-jar,doc-jar,src-zip,src-targz"/>

    <target name="test-report" if="tested">
        <junitreport todir="${reports.test}">
            <fileset dir="${test.results}">
                <include name="**/TEST-*.xml"/>
            </fileset>
            <report todir="${reports.test}"/>
        </junitreport>
    </target>

    <target name="coverage-report" if="use.cobertura">
        <cobertura-report format="xml" destdir="${reports.coverage}" srcdir="${src}"
                          datafile="${coverage}/cobertura.ser"/>
        <cobertura-report format="html" destdir="${reports.coverage}" srcdir="${src}"
                          datafile="${coverage}/cobertura.ser"/>
    </target>

    <target name="report" depends="test-report,coverage-report"/>

    <target name="resolve-report" depends="resolve" description="Generate Ivy resolution report">
        <ivy:report todir="${reports.ivy}"/>
    </target>

    <target name="dist" depends="clean,artifacts,test,integration-test,report" description="Create distribution artifacts">
        <fail if="test.failed" message="Tests failed"/>
    </target>

    <target name="deploy" depends="dist" if="use.war" description="Deploy the war">
        <fail unless="CATALINA_HOME" message="CATALINA_HOME is not set"/>
        <copy file="${build.dist}/${ant.project.name}.war" todir="${deploy.webapps}"/>
    </target>

    <target name="publish-local" depends="dist" description="Publish artifacts to local repository">
        <ivy:publish resolver="local" overwrite="true">
            <artifacts pattern="${build.dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

    <target name="publish-public" depends="dist">
        <ivy:publish resolver="dorothy-public" overwrite="true">
            <artifacts pattern="${build.dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

    <target name="publish-private" depends="dist">
        <ivy:publish resolver="dorothy-private" overwrite="true">
            <artifacts pattern="${build.dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

    <target name="svnrev" if="use.svn">
        <loadfile property="dist.revision" srcFile="./.svn/entries">
            <filterchain>
                <headfilter lines="1" skip="3"/>
                <deletecharacters chars="\n"/>
            </filterchain>
        </loadfile>
        <echo message="Revision: ${dist.revision}"/>
    </target>

    <target name="svnpath" if="use.svn">
        <loadfile property="dist.path" srcFile="./.svn/entries">
            <filterchain>
                <headfilter lines="1" skip="4"/>
                <deletecharacters chars="\n"/>
            </filterchain>
        </loadfile>
        <echo message="Path: ${dist.path}"/>
    </target>
</project>
